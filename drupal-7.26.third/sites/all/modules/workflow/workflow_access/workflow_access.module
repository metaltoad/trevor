<?php
/**
 * @file
 * Provides node access permissions based on workflow states.
 */

/**
 * Implements hook_menu().
 */
function workflow_access_menu() {
  $items = array();

  $items["admin/config/workflow/workflow/access/%workflow"] = array(
    'title' => 'Access',
    'file' => 'workflow_access.pages.inc',
    'access arguments' => array('administer workflow'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('workflow_access_form', 5),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_grants().
 *
 * Supply the workflow access grants. We are simply using
 * roles as access lists, so rids translate directly to gids.
 */
function workflow_access_node_grants($account, $op) {
  return array(
    'workflow_access' => array_keys($account->roles),
    'workflow_access_owner' => array($account->uid),
  );
}

/**
 * Implements hook_node_access_records().
 *
 * Returns a list of grant records for the passed in node object.
 * @todo: support Workflow Field.
 */
function workflow_access_node_access_records($node) {
  $grants = array();

  if ($current_sid = workflow_node_current_state($node)) {
    // Get 'author' of this entity.
    // - Some entities (e.g, taxonomy_term) do not have a uid.
    // Anonymous ($uid == 0) author is not allowed for role 'author' (== -1).
    $uid = isset($node->uid) ? $node->uid : 0;

    foreach (workflow_access_get_workflow_access_by_sid($current_sid) as $grant) {
      $grants[] = array(
        'realm' => ($uid > 0 && $grant->rid == WORKFLOW_ROLE_AUTHOR_RID) ? 'workflow_access_owner' : 'workflow_access',
        'gid' => ($uid > 0 && $grant->rid == WORKFLOW_ROLE_AUTHOR_RID) ? $node->uid : $grant->rid,
        'grant_view' => $grant->grant_view,
        'grant_update' => $grant->grant_update,
        'grant_delete' => $grant->grant_delete,
        'priority' => variable_get('workflow_access_priority', 0),
      );
    }
  }
  return $grants;
}

/**
 * Implements hook_node_access_explain().
 *
 * This is a Devel Node Access hook.
 */
function workflow_access_node_access_explain($row) {
  static $interpretations = array();
  switch ($row->realm) {
    case 'workflow_access_owner':
      $interpretations[$row->gid] = t('Workflow access: author of the content may access');
      break;

    case 'workflow_access':
      $roles = user_roles();
      $interpretations[$row->gid] = t('Workflow access: %role may access', array('%role' => $roles[$row->gid]));
      break;
  }
  return (!empty($interpretations[$row->gid]) ? $interpretations[$row->gid] : NULL);
}

/**
 * Implements hook_workflow_operations().
 *
 * Create action link for access form.
 */
function workflow_access_workflow_operations($op, $workflow = NULL, $state = NULL) {
  switch ($op) {
    case 'workflow':
      $alt = t('Control content access for @wf', array('@wf' => $workflow->getName()));
      $actions = array(
        'workflow_access_form' => array(
          'title' => t('Access'),
          'href' => "admin/config/workflow/workflow/access/$workflow->wid",
          'attributes' => array('alt' => $alt, 'title' => $alt),
        ),
      );

      return $actions;
  }
}

/**
 * DB functions - all DB interactions are isolated here to make for easy updating should our schema change.
 */

/**
 * Given a sid, retrieve the access information and return the row(s).
 */
function workflow_access_get_workflow_access_by_sid($sid) {
  $results = db_query('SELECT * from {workflow_access} where sid = :sid', array(':sid' => $sid));
  return $results->fetchAll();
}

/**
 * Given a sid and rid (the unique key), delete all access data for this state.
 */
function workflow_access_delete_workflow_access_by_sid_rid($sid, $rid) {
  db_delete('workflow_access')->condition('sid', $sid)->condition('rid', $rid)->execute();
}

/**
 * Given a sid, delete all access data for this state.
 */
function workflow_access_delete_workflow_access_by_sid($sid) {
  db_delete('workflow_access')->condition('sid', $sid)->execute();
}

/**
 * Given data, insert into workflow access - we never update.
 */
function workflow_access_insert_workflow_access_by_sid(&$data) {
  $data = (object) $data;
  workflow_access_delete_workflow_access_by_sid_rid($data->sid, $data->rid);
  drupal_write_record('workflow_access', $data);
}

/**
 * Implements hook_form_alter().
 *
 * @todo: align the location of this setting better with the other settings.
 * @todo: this setting is on a page that is not accessible for Workflow Field.
 */
function workflow_access_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'workflow_admin_ui_overview_page':
      $form['workflow_access'] = array(
        '#type' => 'fieldset',
        '#title' => t('Workflow Access'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['workflow_access']['workflow_access_priority'] = array(
        '#type' => 'weight',
        '#delta' => 10,
        '#title' => t('Workflow Access Priority'),
        '#default_value' => variable_get('workflow_access_priority', 0),
        '#description' => t('This sets the node access priority. Changing this
          setting can be dangerous. If there is any doubt, leave it at 0. 
          <a href="@url">Read the manual.</a>', array('@url' => url('https://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_access_records/7'))),
      );

      $form['#submit'][] = 'workflow_access_priority_submit';
      return;
  }
}

/**
 * Submit handler.
 */
function workflow_access_priority_submit($form, &$form_state) {
  variable_set('workflow_access_priority', $form_state['values']['workflow_access']['workflow_access_priority']);
}

/**
 * Implements hook_features_api().
 *
 * Tell the Features module that we intend to provide one exportable component.
 */
function workflow_access_features_api() {
  return array(
    'workflow_access' => array(
      'name' => t('Workflow access'),
      'file' => drupal_get_path('module', 'workflow_access') . '/workflow_access.features.inc',
      'default_hook' => 'workflow_access_features_default_settings',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'feature_source' => TRUE,
    ),
  );
}
